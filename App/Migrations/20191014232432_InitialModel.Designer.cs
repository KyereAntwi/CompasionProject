// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceLayer.Data;

namespace App.Migrations
{
    [DbContext(typeof(ServiceLayerDbContext))]
    [Migration("20191014232432_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectModels.Models.Academics.AcademicTerm", b =>
                {
                    b.Property<int>("AcademicTermID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateEnded");

                    b.Property<DateTime>("DateStarted");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.HasKey("AcademicTermID");

                    b.ToTable("AcademicTerms");
                });

            modelBuilder.Entity("ProjectModels.Models.Academics.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<int>("DepartmentID");

                    b.Property<string>("Name");

                    b.HasKey("ClassID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ProjectModels.Models.Academics.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ProjectModels.Models.Academics.DepartmentSubject", b =>
                {
                    b.Property<int>("DepartmentSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentID");

                    b.Property<int>("SubjectID");

                    b.HasKey("DepartmentSubjectID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SubjectID");

                    b.ToTable("DepartmentSubject");
                });

            modelBuilder.Entity("ProjectModels.Models.Academics.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("SubjectID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ProjectModels.Models.Academics.Transcript", b =>
                {
                    b.Property<int>("TranscriptID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicTermID");

                    b.Property<int>("ChildID");

                    b.Property<double>("ClassScore");

                    b.Property<double>("ExamScore");

                    b.Property<int>("SubjectID");

                    b.HasKey("TranscriptID");

                    b.HasIndex("AcademicTermID");

                    b.HasIndex("ChildID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Transcripts");
                });

            modelBuilder.Entity("ProjectModels.Models.Challenge", b =>
                {
                    b.Property<int>("ChallengeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChallengeTitle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.HasKey("ChallengeID");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("ProjectModels.Models.ChildChallenge", b =>
                {
                    b.Property<int>("ChildChallengeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChallengeID");

                    b.Property<int>("ChildID");

                    b.HasKey("ChildChallengeID");

                    b.HasIndex("ChallengeID");

                    b.HasIndex("ChildID");

                    b.ToTable("ChildChallenges");
                });

            modelBuilder.Entity("ProjectModels.Models.ChildNeed", b =>
                {
                    b.Property<int>("ChildNeedID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildID");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("ChildNeedID");

                    b.HasIndex("ChildID");

                    b.ToTable("ChildNeeds");
                });

            modelBuilder.Entity("ProjectModels.Models.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<int>("PersonID");

                    b.Property<string>("PostalAddress");

                    b.Property<string>("Telephone");

                    b.Property<string>("WebUrl");

                    b.HasKey("ContactID");

                    b.HasIndex("PersonID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ProjectModels.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("ImageUrl");

                    b.Property<string>("MiddleNames")
                        .HasMaxLength(15);

                    b.Property<string>("Nationality")
                        .IsRequired();

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("User")
                        .IsRequired();

                    b.HasKey("PersonID");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("ProjectModels.Models.SponserActivities.Letter", b =>
                {
                    b.Property<int>("LetterID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildID");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Details");

                    b.Property<bool>("Read");

                    b.Property<int>("SponcerID");

                    b.Property<int?>("SponserPersonID");

                    b.Property<string>("Title");

                    b.HasKey("LetterID");

                    b.HasIndex("ChildID");

                    b.HasIndex("SponserPersonID");

                    b.ToTable("Letters");
                });

            modelBuilder.Entity("ProjectModels.Models.SponserActivities.TakeCare", b =>
                {
                    b.Property<int>("TakeCareID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildID");

                    b.Property<DateTime>("DateStarted");

                    b.Property<bool>("PolicySigned");

                    b.Property<int>("SponserID");

                    b.HasKey("TakeCareID");

                    b.HasIndex("ChildID");

                    b.ToTable("TakeCares");
                });

            modelBuilder.Entity("ProjectModels.Models.SponserActivities.Visit", b =>
                {
                    b.Property<int>("VisitID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LeavingDate");

                    b.Property<int>("SponserID");

                    b.Property<DateTime>("VisitDate");

                    b.Property<bool>("Visited");

                    b.HasKey("VisitID");

                    b.HasIndex("SponserID");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("ProjectModels.Models.SponserActivities.Volunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SponserID");

                    b.Property<string>("VolunteeringType");

                    b.HasKey("VolunteerID");

                    b.HasIndex("SponserID");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("ProjectModels.Models.Talent", b =>
                {
                    b.Property<int>("TalentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildID");

                    b.Property<string>("Description");

                    b.Property<string>("TalentTitle");

                    b.HasKey("TalentID");

                    b.HasIndex("ChildID");

                    b.ToTable("Talents");
                });

            modelBuilder.Entity("ProjectModels.Models.Child", b =>
                {
                    b.HasBaseType("ProjectModels.Models.Person");

                    b.Property<int>("ClassID");

                    b.Property<DateTime>("DateAdmitted");

                    b.HasIndex("ClassID");

                    b.HasDiscriminator().HasValue("Child");
                });

            modelBuilder.Entity("ProjectModels.Models.Sponser", b =>
                {
                    b.HasBaseType("ProjectModels.Models.Person");

                    b.Property<string>("EducationalLevel")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("PreferedCommunication")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasDiscriminator().HasValue("Sponser");
                });

            modelBuilder.Entity("ProjectModels.Models.Worker", b =>
                {
                    b.HasBaseType("ProjectModels.Models.Person");

                    b.Property<string>("EducationalLevel")
                        .HasColumnName("Worker_EducationalLevel");

                    b.Property<string>("MaritalStatus")
                        .HasColumnName("Worker_MaritalStatus");

                    b.Property<string>("Position");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("ProjectModels.Models.Academics.Class", b =>
                {
                    b.HasOne("ProjectModels.Models.Academics.Department", "Department")
                        .WithMany("Classes")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectModels.Models.Academics.DepartmentSubject", b =>
                {
                    b.HasOne("ProjectModels.Models.Academics.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectModels.Models.Academics.Subject", "Subject")
                        .WithMany("Departments")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectModels.Models.Academics.Transcript", b =>
                {
                    b.HasOne("ProjectModels.Models.Academics.AcademicTerm", "AcademicTerm")
                        .WithMany()
                        .HasForeignKey("AcademicTermID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectModels.Models.Child", "Child")
                        .WithMany("Transcripts")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectModels.Models.Academics.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectModels.Models.ChildChallenge", b =>
                {
                    b.HasOne("ProjectModels.Models.Challenge", "Challenge")
                        .WithMany("Children")
                        .HasForeignKey("ChallengeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectModels.Models.Child", "Child")
                        .WithMany("Challenges")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectModels.Models.ChildNeed", b =>
                {
                    b.HasOne("ProjectModels.Models.Child", "Child")
                        .WithMany("Needs")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectModels.Models.Contact", b =>
                {
                    b.HasOne("ProjectModels.Models.Person", "Person")
                        .WithMany("Contacts")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectModels.Models.SponserActivities.Letter", b =>
                {
                    b.HasOne("ProjectModels.Models.Child", "Child")
                        .WithMany("Letters")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectModels.Models.Sponser", "Sponser")
                        .WithMany("Letters")
                        .HasForeignKey("SponserPersonID");
                });

            modelBuilder.Entity("ProjectModels.Models.SponserActivities.TakeCare", b =>
                {
                    b.HasOne("ProjectModels.Models.Child", "Child")
                        .WithMany("Sponsers")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectModels.Models.SponserActivities.Visit", b =>
                {
                    b.HasOne("ProjectModels.Models.Sponser", "Sponser")
                        .WithMany("Visits")
                        .HasForeignKey("SponserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectModels.Models.SponserActivities.Volunteer", b =>
                {
                    b.HasOne("ProjectModels.Models.Sponser", "Sponser")
                        .WithMany("VolunteeringActivities")
                        .HasForeignKey("SponserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectModels.Models.Talent", b =>
                {
                    b.HasOne("ProjectModels.Models.Child", "Child")
                        .WithMany("Talents")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectModels.Models.Child", b =>
                {
                    b.HasOne("ProjectModels.Models.Academics.Class", "Class")
                        .WithMany("Children")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
